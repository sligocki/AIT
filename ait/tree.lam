-- tree calculus in lambda calculus
-- https://github.com/barry-jay-personal/tree-calculus/blob/master/tree_book.pdf
let
  -- trees are built from nodes by application
  nd = \a\n.n;              -- node (△)
  ap = \x\y\a\n. a x y;     -- application of x to y
  -- apply node to 3 arguments x (reduced), y, and z
  step = \x\y\z. x (\x1\x'. x1
    (\x2\w. z w x')         -- △(△wx)yz = z w x
    (ap (ap y z) (ap x' z)) -- △(△x) yz = y z (x z)
    ) y;                    -- △ △   yz = y
  -- evaluate an arbitrary tree
  eval = \t. t  (\t1.       -- delay \z
        eval t1 (\t2.       -- delay \y
             t2 (\t3\x.     -- t3 must be △
             (step (eval x))
                ) (\y\z.t)) (\z.t)) t
in eval
