let
  -- Scott numerals
  S0 = \s\z. z;
  Ssucc = \n\s\z. s n;
  S1 = Ssucc S0;
  S2 = Ssucc S1;
  S3 = Ssucc S2;
  Ssub = \x\y. y (x Ssub (\y1. x)) x;

  -- standard fix-point Y-combinator
  Y = \f. (\x. x x) (\x. f (x x)); -- 25 bits

  F_ = \f\m\n. n (\n1. Ssub n (m (f n1))) S1;
  M_ = \f\m\n. n (\n1. Ssub n (f (m n1))) S0;

  -- mutual recursion using recursive tuples
  -- https://codegolf.stackexchange.com/questions/266083/write-a-variadic-fixed-point-combinator/275513?noredirect=1#comment593235_275513
  
  FM = \z. z (FM F_) (FM M_);
  F = FM (\f\m. f);
  M = FM (\f\m. m);

  map = \f. (let go = \l.l(\h\t\_\z.z (f h) (go t))l in go);
  Ylist = map (\z.z Ylist); -- 95 bits

  T = \t\f. t;
  F = \t\f. f;
  cons = \x\y\z. z x y;
  nil = F;
  LF_ = \lfm\n. n (\n1. Ssub n (lfm F T (lfm T n1))) S1;
  LM_ = \lfm\n. n (\n1. Ssub n (lfm T (lfm F T n1))) S0;
  LFM = Ylist (cons LF_ (cons LM_ nil));
  LM = LFM F T

in Ylist
